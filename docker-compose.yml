services:
  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    environment:
      GENERIC_TIMEZONE: "Asia/Seoul"
      N8N_SECURE_COOKIE: "false"
      TZ: "Asia/Seoul"
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_RUNNERS_ENABLED: "true"
      N8N_BLOCK_ENV_ACCESS_IN_NODE: "false"
      N8N_NODES_ALLOW_BUILTIN_MODULES: "*"
      N8N_NODES_EXCLUDE_BUILTIN_MODULES: ""
    volumes:
      - n8n_data:/home/node/.n8n
    ports:
      - "5678:5678"
    networks: [appnet]

  fastapi:
    build:
      context: .
      dockerfile: src/Dockerfile
    container_name: fastapi
    restart: unless-stopped
    command: uvicorn src.app.main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    environment:
      POSTGRESQL_DB_HOST: "host.docker.internal"  # Î°úÏª¨Ìò∏Ïä§Ìä∏Ïùò SSH ÌÑ∞ÎÑê ÏÇ¨Ïö©
      POSTGRESQL_DB_PORT: "15432"
      POSTGRESQL_DB_DATABASE: ${POSTGRESQL_DB_DATABASE}
      POSTGRESQL_DB_USER: ${POSTGRESQL_DB_USER}
      POSTGRESQL_DB_PASSWORD: ${POSTGRESQL_DB_PASSWORD}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgresql:
        condition: service_healthy             # DB Ìó¨Ïä§Ï≤¥ÌÅ¨ ÌÜµÍ≥º ÌõÑ Í∏∞Îèô
    networks: [appnet]

  postgresql:
    image: postgres:15
    container_name: postgresql
    restart: unless-stopped
    # üîí Ïô∏Î∂Ä ÎÖ∏Ï∂ú Í∏àÏßÄ: EC2Ïùò 127.0.0.1Î°úÎßå Î∞îÏù∏Îî©
    ports:
      - "127.0.0.1:5432:5432"
    networks: [appnet]
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: autotrading
      POSTGRES_USER: devjun
      POSTGRES_PASSWORD: "X7pQa9Lm!"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devjun -d autotrading -h 127.0.0.1 -p 5432 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    networks: [appnet]
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  appnet:
    driver: bridge

volumes:
  n8n_data:
  postgresql_data:
  redis_data: